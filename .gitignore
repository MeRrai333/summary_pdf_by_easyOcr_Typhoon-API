# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff (if you also use Django):
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff (if you also use Flask):
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Virtual Environments
# ===================
# Common virtual environment directory names
venv/
env/
ENV/
env.bak/
venv.bak/
.venv/
.env/

# virtualenv
pyvenv.cfg

# Specific virtual environment names (add your custom names here)
myenv/
fastapi-env/
api-env/
backend-env/

# Conda environments
.conda/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/

# VS Code
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Environment Variables
# =====================
.env
.env.local
.env.*.local
.env.production
.env.development
.env.staging
.env.test

# Keep environment template
!.env.example
!.env.template

# FastAPI Specific
# ================
# Upload directories
media/
static/uploads/
temp/
tmp/

# Log files
*.log
logs/
log/

# Database files
*.db
*.sqlite
*.sqlite3
database.db
app.db
test.db

# Alembic (if using database migrations)
# Keep the alembic directory but ignore version files during development
# alembic/versions/*.py
# !alembic/versions/__init__.py

# Session files
sessions/
*.session

# Cache directories
.cache/
cache/
__pycache__/
.pytest_cache/

# API Documentation (if auto-generated)
docs/build/
api-docs/

# Docker
# ======
# Dockerfile and docker-compose.yml should be committed
# But ignore Docker-related temporary files
.dockerignore
docker-compose.override.yml
.docker/

# Kubernetes
*.yaml.local
*.yml.local

# Terraform (if using infrastructure as code)
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# AWS
.aws/

# Google Cloud
.gcloud/
service-account-key.json
*.json

# Azure
.azure/

# Node.js (if you have a frontend)
# =================================
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# Frontend build files
dist/
build/
public/build/

# Operating System Files
# ======================
# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon?
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# Backup files
*.bak
*.backup
*.old
*.orig
*.save
*.swp
*.tmp

# Compressed files (usually not source code)
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Security and Secrets
# =====================
# API keys and secrets
secrets/
.secrets/
api-keys/
credentials/
private/

# SSL certificates
*.pem
*.crt
*.key
*.p12
*.pfx

# SSH keys
id_rsa
id_ed25519
*.pub

# GPG keys
*.gpg
*.asc

# Testing and Coverage
# ====================
.coverage
.coveragerc
htmlcov/
.pytest_cache/
.testmondata

# Profiling
*.prof
*.lprof

# Monitoring and Metrics
# ======================
# Prometheus
prometheus_multiproc_dir/

# Grafana
grafana/

# Application Specific
# ====================
# Add your application-specific patterns here

# Example: Machine Learning models
# *.pkl
# *.joblib
# *.h5
# *.onnx
# models/

# Example: Data files (be careful with this)
# *.csv
# *.json
# *.xml
# data/

# Example: Generated files
# generated/
# auto-generated/

# Example: Third-party downloads
# downloads/
# vendors/

# Local development files
local/
.local/
dev/
development/

# Temporary files created by your application
temp_*
tmp_*
*.temp
*.tmp